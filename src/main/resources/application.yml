spring:
  application:
    name: 'food-delivery-app'
  datasource:
    url: 'jdbc:postgresql://localhost:5432/postgres'
    username: 'postgres'
    password: 'postgres'
    driverClassName: 'org.postgresql.Driver'
  jpa:
    hibernate.ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: 'org.hibernate.dialect.PostgreSQLDialect'
  cloud:
    stream:
      binders:
        kafka:
          type: 'kafka'
      function:
        definition: onReceiveFoodOrdersToDelivery
        bindings:
          onReceiveFoodOrdersToDelivery-in-0: 'delivery-consumer'
      bindings:
        delivery-consumer:
          group: '${spring.application.name}-food-order'
          binder: 'kafka'
          destination: 'delivery-orders-topic'
          content-type: 'application/json'
          consumer:
            maxAttempts: 1
            partitioned: true
            concurrency: 1
        delivery-orders-producer-out-0:
          binder: 'kafka'
          destination: 'delivery-orders-topic'
      kafka:
#        bindings:
#          food-orders-consumer:
#            consumer:
#              configuration:
#                max.poll.interval.ms: 10000
        binder:
          brokers: 'http://localhost:29092'
          autoCreateTopics: true

client:
  mockserver:
    url: 'http://localhost:1080'
    order-dispatch-uri: '/order-delivery/'

